//////////////////////////////////////// Week 1 ////////////////////////////////////////

abstract class AbstractItem 
{
    protected String name;
    protected double price;
    protected int quantity;

    public AbstractItem(String name, double price, int quantity) 
    {
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    public abstract double calculateTotalPrice();

    public String getName()
    {
        return name;
    }

    public double getPrice()
    {
        return price;
    }

    public int getQuantity() 
    {
        return quantity;
    }
}

class RenewableItem extends AbstractItem 
{
    public RenewableItem(String name, double price, int quantity) 
    {
        super(name, price, quantity);
    }

    @Override
    public double calculateTotalPrice() 
    {
        return price * quantity;
    }
}

class NonRenewableItem extends AbstractItem 
{
    public NonRenewableItem(String name, double price, int quantity) 
    {
        super(name, price, quantity);
    }

    @Override
    public double calculateTotalPrice()
    {
        return price * quantity;
    }
}

public class Inventory 
{
    public static void main(String[] args) 
    {
        // Main method to run the program
    }
}

//////////////////////////////////////// Week 2 ////////////////////////////////////////

import javax.swing.*;
import java.awt.*;

public class Inventory 
{
    public Inventory() 
    {
        createAndShowGUI();
    }

    private void createAndShowGUI()
    {
        JFrame frame = new JFrame("Inventory Management System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        JTextArea textArea = new JTextArea();
        JScrollPane scrollPane = new JScrollPane(textArea);
        frame.add(scrollPane, BorderLayout.CENTER);

        frame.setVisible(true);
    }

    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(() -> new Inventory());
    }
}

//////////////////////////////////////// Week 3 ////////////////////////////////////////

abstract class AbstractItem 
{
    protected String name;
    protected double price;
    protected int quantity;

    public AbstractItem(String name, double price, int quantity)
    {
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    public abstract double calculateTotalPrice();

    public String getName() 
    {
        return name;
    }

    public double getPrice() 
    {
        return price;
    }

    public int getQuantity()
    {
        return quantity;
    }
}

class RenewableItem extends AbstractItem 
{
    public RenewableItem(String name, double price, int quantity) 
    {
        super(name, price, quantity);
    }

    @Override
    public double calculateTotalPrice() 
    {
        return price * quantity;
    }
}

class NonRenewableItem extends AbstractItem 
{
    public NonRenewableItem(String name, double price, int quantity)
    {
        super(name, price, quantity);
    }

    @Override
    public double calculateTotalPrice() 
    {
        return price * quantity;
    }
}

//////////////////////////////////////// Week 4 ////////////////////////////////////////

import java.util.ArrayList;
import java.util.Iterator;

public class Inventory 
{
    private ArrayList<AbstractItem> inventory = new ArrayList<>();

    public void addItem(AbstractItem item)
    {
        inventory.add(item);
    }

    public void removeItem(AbstractItem item)
    {
        Iterator<AbstractItem> iterator = inventory.iterator();
        while (iterator.hasNext()) {
            AbstractItem currentItem = iterator.next();
            if (currentItem.equals(item)) {
                iterator.remove();
            }
        }
    }

    public void viewAllItems() 
    {
        for (AbstractItem item : inventory) 
        {
            System.out.println(item.getName());
        }
    }

    public static void main(String[] args) 
    {
        // Main method to run the program
    }
}

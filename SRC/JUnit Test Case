import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.List;

/**
 * 
 * Lead Author(s):
 * @author Brian Le
 *
 * <<add additional lead authors here, with a full first and last name>>
 * 
 * Other contributors:
 * <<add additional contributors (mentors, tutors, friends) here, with contact information>>
 * 
 * <<add more references here>>
 *  
 * Version/date: 05/20/2023
 * 
 * Responsibilities of class:
 * manages the storage and manipulation of items within an inventory system.
 * It provides functionalities for viewing, adding, and removing items from 
 * the inventory, as well as saving the inventory to a file. Additionally, 
 * it is responsible for creating and displaying the graphical user interface
 * (GUI) for interacting with the inventory system
 * 
 */



/////////////////////////////Interface for items/////////////////////////////

interface Item 
{
	
 String getName(); // gets the name of item
 double getPrice(); // gets the price of the item
 int getQuantity(); // gets the quantity of the tiem
 double calculateTotalPrice(); // calculates the total price of the item (price * quantity)
}

//////////////////////////////Abstract item //////////////////////////////

abstract class AbstractItem implements Item 
{
 protected String name;
 protected double price;
 protected int quantity;

 public AbstractItem(String name, double price, int quantity) 
 {
     this.name = name;
     this.price = price;
     this.quantity = quantity;
 }

 @Override
 public String getName() 
 {
     return name;
 }

 @Override
 public double getPrice() 
 {
     return price;
 }

 @Override
 public int getQuantity() 
 {
     return quantity;
 }
}

//Aggregation class for managing items
class InventoryManager {
 private List<Item> items = new ArrayList<>(); // Define items list

 /**
  * Adds an item to the inventory.
  * 
  * @param item The item to add.
  */
 public void addItem(Item item) {
     items.add(item);
 }

 /**
  * Removes an item from the inventory.
  * 
  * @param item The item to remove.
  */

 public void removeItem(Item item) {
     items.remove(item);
 }

 /**
  * Gets all items in the inventory.
  * 
  * @return The list of items.
  */
 public List<Item> getItems() { // Define getItems method
     return items;
 }
}

//Concrete subclass for renewable items
class RenewableItem extends AbstractItem {
 public RenewableItem(String name, double price, int quantity) {
     super(name, price, quantity);
 }

 @Override
 public double calculateTotalPrice() {
     return getPrice() * getQuantity();
 }
}

//Concrete subclass for non-renewable items
class NonRenewableItem extends AbstractItem {
 public NonRenewableItem(String name, double price, int quantity) {
     super(name, price, quantity);
 }

 @Override
 public double calculateTotalPrice() {
     return getPrice() * getQuantity();
 }
}

/////////////////////////////Inventory class to manage items/////////////////////////////

public class Inventory {
 private InventoryManager inventoryManager; // Declare InventoryManager instance
 private JFrame frame;

 /**
  * Constructs an Inventory object.
  */
 public Inventory() {
     inventoryManager = new InventoryManager(); // Initialize InventoryManager instance
     loadDataFromFile(); // Load data from file at startup
     createAndShowGUI();
 }

 /**
  * Loads inventory data from a file.
  */
 private void loadDataFromFile() {
     try (Scanner scanner = new Scanner(new File("inventory.txt"))) {
         while (scanner.hasNextLine()) {
             String line = scanner.nextLine();
             String[] parts = line.split(",");
             if (parts.length == 3) {
                 String name = parts[0];
                 double price = Double.parseDouble(parts[1]);
                 int quantity = Integer.parseInt(parts[2]);
                 inventoryManager.addItem(new RenewableItem(name, price, quantity));
             }
         }
     } catch (FileNotFoundException | NumberFormatException e) {
         JOptionPane.showMessageDialog(null, "No current Data: " + e.getMessage());
     }
 }

 /**
  * Creates and shows the GUI for the inventory management system.
  */
 private void createAndShowGUI() {
     frame = new JFrame("Inventory Management System");
     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
     frame.setSize(400, 300);
     frame.setLayout(new BorderLayout());

     JTextArea textArea = new JTextArea();
     JScrollPane scrollPane = new JScrollPane(textArea);
     frame.add(scrollPane, BorderLayout.CENTER);

     JPanel buttonPanel = new JPanel();
     buttonPanel.setLayout(new FlowLayout());

     JButton viewButton = new JButton("View All");
     JButton addButton = new JButton("Add Item");
     JButton deleteButton = new JButton("Delete Item");
     JButton saveButton = new JButton("Save Inventory");

     viewButton.addActionListener(e -> viewAll(textArea));

     addButton.addActionListener(e -> addItem());

     deleteButton.addActionListener(e -> removeItem());

     saveButton.addActionListener(e -> saveInventory());

     buttonPanel.add(viewButton);
     buttonPanel.add(addButton);
     buttonPanel.add(deleteButton);
     buttonPanel.add(saveButton);

     frame.add(buttonPanel, BorderLayout.SOUTH);
     frame.setVisible(true);
 }

 /**
  * Displays all items in the inventory.
  * 
  * @param textArea The text area to display items in.
  */
 private void viewAll(JTextArea textArea) {
     textArea.setText("");
     textArea.append("VIEW ALL\n");
     textArea.append("----------------------------------------\n");
     textArea.append(String.format("%-20s%-12s%-10s%n", "NAME", "PRICE", "QUANTITY"));
     textArea.append("----------------------------------------\n");

     double renewableTotalPrice = 0;
     int renewableTotalQuantity = 0;
     double nonRenewableTotalPrice = 0;
     int nonRenewableTotalQuantity = 0;

     textArea.append("Renewable Items:\n");
     textArea.append("----------------------------------------\n");
     for (Item item : inventoryManager.getItems()) {
         if (item instanceof RenewableItem) {
             textArea.append(String.format("%-20s$%-12.2f%-10d%n", item.getName(), item.getPrice(), item.getQuantity()));
             renewableTotalQuantity += item.getQuantity();
             renewableTotalPrice += item.calculateTotalPrice();
         }
     }

     textArea.append(String.format("\nTotal Renewable Items: %d%n", renewableTotalQuantity));
     textArea.append(String.format("Total Renewable Price: $%.2f%n", renewableTotalPrice));

     textArea.append("\n\nNon-Renewable Items:\n");
     textArea.append("----------------------------------------\n");
     for (Item item : inventoryManager.getItems()) {
         if (item instanceof NonRenewableItem) {
             textArea.append(String.format("%-20s$%-12.2f%-10d%n", item.getName(), item.getPrice(), item.getQuantity()));
             nonRenewableTotalQuantity += item.getQuantity();
             nonRenewableTotalPrice += item.calculateTotalPrice();
         }
     }

     textArea.append(String.format("\nTotal Non-Renewable Items: %d%n", nonRenewableTotalQuantity));
     textArea.append(String.format("Total Non-Renewable Price: $%.2f%n", nonRenewableTotalPrice));
 }

 /**
  * Adds an item to the inventory.
  */
 private void addItem() {
     JTextField nameField = new JTextField(10);
     JTextField priceField = new JTextField(10);
     JTextField quantityField = new JTextField(10);

     JPanel panel = new JPanel();
     panel.setLayout(new GridLayout(0, 1));
     panel.add(new JLabel("Name:"));
     panel.add(nameField);
     panel.add(new JLabel("Price:"));
     panel.add(priceField);
     panel.add(new JLabel("Quantity:"));
     panel.add(quantityField);

     int result = JOptionPane.showConfirmDialog(null, panel, "Add Item", JOptionPane.OK_CANCEL_OPTION);
     if (result == JOptionPane.OK_OPTION) {
         try {
             String name = nameField.getText();
             double price = Double.parseDouble(priceField.getText());
             int quantity = Integer.parseInt(quantityField.getText());

             String[] options = {"Renewable", "Non-renewable"};
             int category = JOptionPane.showOptionDialog(null, "Select Category", "Category",
                     JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

             if (category == 0) {
                 inventoryManager.addItem(new RenewableItem(name, price, quantity));
             } else if (category == 1) {
                 inventoryManager.addItem(new NonRenewableItem(name, price, quantity));
             }
             JOptionPane.showMessageDialog(null, "Item added successfully!");
         } catch (NumberFormatException ex) {
             JOptionPane.showMessageDialog(null, "Invalid input! Please enter valid numeric values.");
         }
     }
 }

 /**
  * Removes an item from the inventory.
  */

 private void removeItem() {
     String[] itemNames = new String[inventoryManager.getItems().size()];
     for (int i = 0; i < inventoryManager.getItems().size(); i++) {
         itemNames[i] = inventoryManager.getItems().get(i).getName();
     }

     String itemName = (String) JOptionPane.showInputDialog(null, "Select Item to Remove", "Remove Item",
             JOptionPane.QUESTION_MESSAGE, null, itemNames, itemNames[0]);

     if (itemName != null) {
         for (Item item : inventoryManager.getItems()) {
             if (item.getName().equals(itemName)) {
                 inventoryManager.removeItem(item);
                 JOptionPane.showMessageDialog(null, "Item removed successfully!");
                 break;
             }
         }
     }
 }

 /**
  * Saves the inventory data to a file.
  */
 private void saveInventory() {
     try (PrintWriter writer = new PrintWriter(new FileWriter("inventory.txt"))) {
         for (Item item : inventoryManager.getItems()) {
             writer.printf("%s,%.2f,%d%n", item.getName(), item.getPrice(), item.getQuantity());
         }
         JOptionPane.showMessageDialog(null, "Inventory saved to file.");
     } catch (IOException e) {
         JOptionPane.showMessageDialog(null, "Error saving inventory: " + e.getMessage());
     }
 }

 /**
  * The main method to start the inventory management system.
  * 
  * @param args The command line arguments.
  */
 public static void main(String[] args) {
     new Inventory();
 }
 
}
